digraph "FastlzDecompressData"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="FastlzDecompressData",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="fastlz 解压数据。"];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="allocBytes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_ned_allocator_impl_8cpp.html#af15278d7a4bba22072363abe7b04fb1e",tooltip="分配指定大小的内存"];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="ptr",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$format_8h.html#adb6e274f8eb0b74b2865215e1b49c535",tooltip="Converts p to const void* for pointer formatting."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="detail::bit_cast",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedetail.html#a68cc0da968a823f01db50bc3958c996a",tooltip=" "];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="detail::is_constant\l_evaluated",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedetail.html#aa88c553e0935b1aa6f21ac8045cf2335",tooltip=" "];
  Node5 -> Node6 [id="edge5_Node000005_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="detail::ignore_unused",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespacedetail.html#a039aa82d5bc3557c97ae98da6aec04ce",tooltip=" "];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="deallocBytes",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_ned_allocator_impl_8cpp.html#a394ed5305e19853a8aa9203cdea51dd7",tooltip="释放内存"];
  Node7 -> Node3 [id="edge7_Node000007_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node8 [id="edge8_Node000001_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="fastlz_decompress",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$fastlz_8c.html#a6cce72f3099f53d0cc244162180166b3",tooltip="通用解压缩函数"];
  Node8 -> Node9 [id="edge9_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="fastlz1_decompress",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$fastlz_8c.html#a5ae23e2c48377d079b775e6987518099",tooltip="级别 1 解压缩实现"];
  Node9 -> Node10 [id="edge10_Node000009_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="fastlz_memcpy",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$fastlz_8c.html#a95d18238c9acb9ac4e0748cb7a14527f",tooltip="内存复制函数"];
  Node9 -> Node11 [id="edge11_Node000009_Node000011",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="fastlz_memmove",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$fastlz_8c.html#a5e118747cf5e94edea9db2538d4d2fb6",tooltip="自定义内存移动函数"];
  Node8 -> Node12 [id="edge12_Node000008_Node000012",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="fastlz2_decompress",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$fastlz_8c.html#a966be4548712ef5cac9708929f199976",tooltip="级别 2 解压缩实现"];
  Node12 -> Node10 [id="edge13_Node000012_Node000010",color="steelblue1",style="solid",tooltip=" "];
  Node12 -> Node11 [id="edge14_Node000012_Node000011",color="steelblue1",style="solid",tooltip=" "];
}
