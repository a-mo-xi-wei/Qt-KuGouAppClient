digraph "buffer&lt; T &gt;"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="buffer\< T \>",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="A contiguous memory buffer with an optional growing ability."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="basic_memory_buffer\l\< wchar_t \>",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classbasic__memory__buffer.html",tooltip=" "];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="container_buffer\< typename\l OutputIt::container_type \>",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classdetail_1_1container__buffer.html",tooltip=" "];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="iterator_buffer\< OutputIt,\l enable_if_t\< is_back_insert\l_iterator\< OutputIt \>::value\l &&is_contiguous\< typename OutputIt\l::container_type \>::value, typename\l OutputIt::container_type::value_type \> \>",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classdetail_1_1iterator__buffer_3_01_output_it_00_01enable__if__t_3_01is__back__insert__iteratorc14756b7678d539799ac167e35d72bcb.html",tooltip=" "];
  Node1 -> Node5 [id="edge4_Node000001_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="iterator_buffer\< T\l *, T \>",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classdetail_1_1iterator__buffer_3_01_t_01_5_00_01_t_01_4.html",tooltip=" "];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="iterator_buffer\< T\l *, T, fixed_buffer\l_traits \>",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classdetail_1_1iterator__buffer_3_01_t_01_5_00_01_t_00_01fixed__buffer__traits_01_4.html",tooltip=" "];
  Node1 -> Node7 [id="edge6_Node000001_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="basic_memory_buffer\l\< T, SIZE, Allocator \>",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classbasic__memory__buffer.html",tooltip="A dynamically growing memory buffer for trivially copyable/constructible types with the first SIZE el..."];
  Node1 -> Node8 [id="edge7_Node000001_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="iterator_buffer\< OutputIt,\l T, Traits \>",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$classdetail_1_1iterator__buffer.html",tooltip=" "];
  Node1 -> Node5 [id="edge8_Node000001_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node6 [id="edge9_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
}
