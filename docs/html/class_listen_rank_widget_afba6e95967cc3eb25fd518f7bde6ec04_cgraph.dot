digraph "initUi"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="initUi",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="初始化界面"];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="initRankFree",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_listen_rank_widget.html#afad64274bfad0806bab43766d6b0707a",tooltip="初始化免费榜"];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="arg",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$base_8h.html#a2c8e80c1b1c8b7747e99b8e9a24a0429",tooltip="Returns a named argument to be used in a formatting function."];
  Node3 -> Node3 [id="edge3_Node000003_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node2 -> Node4 [id="edge4_Node000002_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="Async::onResultReady",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace_async.html#aa546dd398e11dcb564e4abdd6fd0ec81",tooltip="执行结果读取函数 创建一个QFutureWatcher读取相应结果传递相应函数中， 如果有更复杂操作就不要使用"];
  Node2 -> Node5 [id="edge5_Node000002_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="Async::runAsync",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$namespace_async.html#a06a076edc2f7af2cc0ecdc6545d55e79",tooltip="runAsync类似于 std::thread和std::invoke 函数参数可以是成员函数 操作符 可以是 lambda表达式 QFutureInterface<ResultType>&作为第一个参..."];
  Node1 -> Node6 [id="edge6_Node000001_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="initRankNew",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_listen_rank_widget.html#a7f7318234d9268703f60c5498776f919",tooltip="初始化新品榜"];
  Node6 -> Node3 [id="edge7_Node000006_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node6 -> Node4 [id="edge8_Node000006_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node6 -> Node5 [id="edge9_Node000006_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node7 [id="edge10_Node000001_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="initRankSell",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_listen_rank_widget.html#a9abe877eead4ba58684923e7c24d374c",tooltip="初始化热销榜"];
  Node7 -> Node3 [id="edge11_Node000007_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node4 [id="edge12_Node000007_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node5 [id="edge13_Node000007_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node8 [id="edge14_Node000001_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="initRankSkyrocket",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_listen_rank_widget.html#a0a55030b86d6871725fa7d6eb4d64c2c",tooltip="初始化飙升榜"];
  Node8 -> Node3 [id="edge15_Node000008_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node8 -> Node4 [id="edge16_Node000008_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node8 -> Node5 [id="edge17_Node000008_Node000005",color="steelblue1",style="solid",tooltip=" "];
}
